{"version":3,"sources":["components/Card/cardborder.png","components/Card/index.js","components/CardList/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","className","this","props","name","src","image","description","type2","React","Component","CardList","state","deck","fateDeck","hand","discardPile","handSize","temp","bind","event","make","target","value","character","Axios","get","then","processed","data","sort","a","b","Math","random","map","v","type1","push","setState","pickUp","i","pop","length","index","key","play","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,wC,yRCkB5BC,E,uKAXP,OACI,yBAAKC,UAAU,QACX,4BAAKC,KAAKC,MAAMC,MAChB,yBAAKC,IAAKC,MACV,2BAAIJ,KAAKC,MAAMI,aACf,4BAAKL,KAAKC,MAAMK,Y,GARbC,IAAMC,WCoEVC,G,wDAlEX,WAAYR,GAAO,IAAD,8BACd,cAAMA,IAEDS,MAAO,CACRC,KAAM,GACNC,SAAU,GACVC,KAAM,GACNC,YAAa,GACbC,SAAU,GAGd,EAAKC,KAAK,EAAKA,KAAKC,KAAV,gBAXI,E,iDAcbC,GACDlB,KAAKmB,KAAKD,EAAME,OAAOC,S,2BAGtBC,GAAW,IAAD,OACPX,EAAKX,KAAKU,MAAMC,KAChBC,EAAUZ,KAAKU,MAAME,SAEzBW,IAAMC,IAAN,eAAkBF,IACjBG,MAAK,SAACC,GACMA,EAAUC,KAAKC,MAAK,SAASC,EAAGC,GAAG,MAAO,GAAMC,KAAKC,YACzDC,KAAI,SAACC,GACS,SAAZA,EAAEC,MACDxB,EAAKyB,KAAKF,GAEVtB,EAASwB,KAAKF,MAItB,EAAKG,SAAS,CAAC1B,OAAMC,aACrB,EAAK0B,c,+BAUT,IALA,IAAIzB,EAAMb,KAAKU,MAAMG,KACjBF,EAAMX,KAAKU,MAAMC,KACjB4B,EAAEvC,KAAKU,MAAMK,SAGVwB,EAAE,EAAGA,IACR1B,EAAKuB,KAAKzB,EAAK6B,OAEnBxC,KAAKqC,SAAS,CAACxB,OAAMF,OAAMI,SAAUwB,M,+BAIrC,OACI,yBAAKxC,UAAU,YACiB,IAA3BC,KAAKU,MAAMG,KAAK4B,OACjBzC,KAAKU,MAAMG,KAAKoB,KAAI,SAACC,EAAGQ,GAAJ,OAChB,kBAAC,EAAD,CAAMC,IAAKD,EAAOxC,KAAMgC,EAAEhC,KAAMG,YAAa6B,EAAE7B,YAAa8B,MAAOD,EAAEC,MAAO7B,MAAO4B,EAAE5B,MAAOsC,KAAMV,EAAEU,UACtG,oCACE,4BAAQvB,MAAM,MAAMwB,QAAS7C,KAAKgB,MAAlC,mBACA,4BAAQK,MAAM,aAAawB,QAAS7C,KAAKgB,MAAzC,oB,GA3DGT,IAAMC,Y,MCMdsC,MAPf,WAEI,OACE,kBAAC,EAAD,OCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ddf4fa28.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cardborder.bdffe62e.png\";","import React from \"react\";\nimport \"./index.css\";\nimport image from \"./cardborder.png\";\n\nclass Card extends React.Component{\n    render (){\n\n        return(\n            <div className=\"card\">\n                <h3>{this.props.name}</h3>\n                <img src={image} />\n                <p>{this.props.description}</p>\n                <h6>{this.props.type2}</h6>\n            </div>\n        );\n    }\n}\n\nexport default Card;","import React from \"react\";\nimport Axios from \"axios\";\nimport Card from \"../Card\";\nimport \"./index.css\";\n\nclass CardList extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.state ={\n            deck: [],\n            fateDeck: [],\n            hand: [],\n            discardPile: [],\n            handSize: 0\n        };\n\n        this.temp=this.temp.bind(this);\n    }\n\n    temp(event){\n        this.make(event.target.value);\n    }\n\n    make(character){\n        let deck=this.state.deck;\n        let fateDeck= this.state.fateDeck;\n\n        Axios.get(`/api/${character}`)\n        .then((processed) =>{\n            let data=processed.data.sort(function(a, b){return 0.5 - Math.random()});;\n            data.map((v) => {\n                if(v.type1 === \"Deck\"){\n                    deck.push(v);\n                }else{\n                    fateDeck.push(v);\n                }\n            });\n\n            this.setState({deck, fateDeck});\n            this.pickUp();\n            });\n    }\n\n    pickUp(){\n        let hand= this.state.hand;\n        let deck= this.state.deck;\n        let i=this.state.handSize;\n        \n\n        for(i; i<4; i++){\n            hand.push(deck.pop());\n        }\n        this.setState({hand, deck, handSize: i});\n    }\n\n    render(){\n        return(\n            <div className=\"cardList\">\n                {this.state.hand.length !== 0 ?\n                this.state.hand.map((v, index) =>\n                    <Card key={index} name={v.name} description={v.description} type1={v.type1} type2={v.type2} play={v.play} />)\n                : <>\n                    <button value=\"QOH\" onClick={this.temp}>Queen of Hearts</button>\n                    <button value=\"maleficent\" onClick={this.temp}>Maleficent</button>\n                </>\n                }\n            </div>  \n        );\n    }\n}\n\nexport default CardList;","import React from 'react';\nimport CardList from \"./components/CardList\";\nimport './App.css';\n\nfunction App() {\n\n    return (\n      <CardList />\n    );\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}